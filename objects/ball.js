(function(){   var Vector = Universe.Vector;   var Common = Universe.Common;   // dependencies: Vector   function Ball(radius,color,mass,charge,gradient){   	if(typeof(radius)==='undefined') radius = 20;   	if(typeof(color)==='undefined') color = '#0000ff';   	if(typeof(mass)==='undefined') mass = 1;   	if(typeof(charge)==='undefined') charge = 0;   	if(typeof(gradient)==='undefined') gradient = false;   	this.id = Common.seqNextValue();      this.fixed = true;      this.radius = radius;   	this.color = color;   	this.mass = mass;   	this.charge = charge;   	this.gradient = gradient;   	this.x = 0;   	this.y = 0;   	this.vx = 0;   	this.vy = 0;      this.x_prev = 0;      this.y_prev = 0;      this.x_prev_array = [];      this.y_prev_array = [];   }		   Ball.prototype = {   	getpos: function(){   		return new Vector(this.x,this.y);   	},      getprevpos: function(){         return new Vector(this.x_prev,this.y_prev);      },   	setpos: function(pos){         this.x_prev = this.x;         this.y_prev = this.y;         this.x = pos.x;   		this.y = pos.y;         // this.logposition();   	},      // logposition: function(){      //    this.x_prev_array.unshift( this.x );      //    this.y_prev_array.unshift( this.y );      //    if( this.x_prev_array.length > 10 ){      //       this.x_prev_array.pop();      //       this.y_prev_array.pop();      //    }      // },   	getvel: function(){   		return new Vector(this.vx,this.vy);   	},   	setvel: function(velo){   		this.vx = velo.x;   		this.vy = velo.y;   	},      move(dt, accel) {         // calculate new position         var pos = this.getpos();         var vel = this.getvel();         // var newpos = this.getpos().add( vel.multiply(dt));         var newpos = pos.add( vel.multiply(dt).add(accel.multiply(dt*dt)));         var newvel = vel.add(accel.multiply(0.5*dt));         this.setpos( newpos );         this.setvel( newvel );      },      checkCollision(ball2) {         var ball1 = this;         var pos1 = ball1.getpos();         var pos2 = ball2.getpos();         var r1 = ball1.radius;         var r2 = ball2.radius;         var dist = pos1.subtract(pos2);         var L = dist.length();         if( L <= r1 + r2 ) {            var vel1 = ball1.getvel();            var vel2 = ball2.getvel();            var over = r1 + r2 - L;            var normalVelo1 = vel1.project(dist);            var normalVelo2 = vel2.project(dist);            var tangentVelo1 = vel1.subtract(normalVelo1);            var tangentVelo2 = vel2.subtract(normalVelo2);            var vrel = normalVelo1.subtract(normalVelo2).length(); // relative normal speeds            ball1.setpos( pos1.addScaled(normalVelo1.unit(), -1 * over * normalVelo1.length() / vrel ));            ball2.setpos( pos2.addScaled(normalVelo2.unit(), -1 * over * normalVelo2.length() / vrel ));            var m1 = ball1.mass;            var m2 = ball2.mass;            var u1 = normalVelo1.projection(dist);            var u2 = normalVelo2.projection(dist);            var v1 = ((m1-m2)*u1+2*m2*u2)/(m1+m2);            var v2 = ((m2-m1)*u2+2*m1*u1)/(m1+m2);            normalVelo1 = dist.para(v1);            normalVelo2 = dist.para(v2);            // final velocity vectors after collision            ball1.setvel( normalVelo1.add(tangentVelo1) );            ball2.setvel( normalVelo2.add(tangentVelo2) );         }      },      draw: function(context) {         this.drawCurrent(context);         // this.drawTail(context);      },      drawCurrent: function (context) {           // context.fillStyle = this.color;         context.fillStyle = this.color;   		context.beginPath();   		context.arc(this.x, this.y, this.radius, 0, 2*Math.PI, true);   		context.closePath();   		context.fill();   	},      drawTail: function (context) {           for (var i = 2; i <= 20; i += 1) {            var fillStyle = "rgba(0, 0, 0, " + (30-i)/30 + ")";            context.fillStyle = fillStyle;            if( this.x_prev_array[i] ){               context.beginPath();               x = this.x_prev_array[i];               y = this.y_prev_array[i];               context.arc(x, y, this.radius, 0, 2*Math.PI, true);               context.closePath();               context.fill();            }         }      }   };   Universe.Ball = Ball;})();